C51 COMPILER V9.60.0.0   I2CBRIDGE                                                         03/21/2023 20:03:58 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE I2CBRIDGE
OBJECT MODULE PLACED IN .\src\i2cbridge.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\Mitch\S
                    -implicityStudio\v5_workspace\HOJA-USB-EFM8UB1\src\i2cbridge.c OMF2 LARGE ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMI
                    -ZE(9,SIZE) DEFINE(NDEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\Mitch\SimplicityStudio\v5_workspace\HOJA-USB-EF
                    -M8UB1\inc;C:\Users\Mitch\SimplicityStudio\v5_workspace\HOJA-USB-EFM8UB1\inc\config;C:/SiliconLabs/SimplicityStudio/v5/de
                    -veloper/sdks/8051/v4.2.4//Lib/efm8_assert;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.4//Lib/efm8_usb/in
                    -c;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.4//Device/EFM8UB1/peripheral_driver/inc;C:/SiliconLabs/Sim
                    -plicityStudio/v5/developer/sdks/8051/v4.2.4//Lib/efm8_usbc/lib_kernel/inc;C:/SiliconLabs/SimplicityStudio/v5/developer/s
                    -dks/8051/v4.2.4//Lib/efm8_usbc/lib_usbc_pd/inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.4//Device/sha
                    -red/si8051Base;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.4//Device/EFM8UB1/inc) REGFILE(HOJA-USB-EFM8U
                    -B1.ORC) PRINT(.\src\i2cbridge.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OA OBJECT(.\src\i2cbridge.OBJ)

line level    source

   1          /*
   2           * i2c.c
   3           *
   4           *  Created on: Sep 13, 2022
   5           *      Author: Mitch
   6           */
   7          
   8          #include "i2cbridge.h"
   9          #include <stdio.h>
  10          #include <string.h>
  11          
  12          uint8_t rx_buffer[11] = {0};
  13          uint8_t rx_idx = 0;
  14          uint8_t rx_remaining = 9;
  15          
  16          bool rx_complete = false;
  17          
  18          uint8_t tx_buffer[11] = {0};
  19          uint8_t tx_idx = 0;
  20          uint8_t tx_remaining = 9;
  21          
  22          i2c_input_s i2c_input_buffer = {0};
  23          ui2c_return_msg_s ui2c_return_msg = {0};
  24          
  25          //-----------------------------------------------------------------------------
  26          // I2C0_ISR
  27          //-----------------------------------------------------------------------------
  28          //
  29          // I2C0 ISR Content goes here. Remember to clear flag bits:
  30          // I2C0STAT::I2C0INT (I2C Interrupt)
  31          //
  32          //-----------------------------------------------------------------------------
  33          SI_INTERRUPT(I2C0_ISR, I2C0_IRQn)
  34          {
  35   1        switch (I2C0STAT & I2C_STATUS_VECTOR_MASK) {
  36   2      
  37   2          case I2C_ADDR_RD:  // START+ADDR+R
  38   2            I2C0STAT &= ~(I2C0STAT_START__BMASK | I2C0STAT_RD__BMASK);
  39   2      
  40   2            tx_idx = 0;
  41   2            I2C0DOUT = tx_buffer[tx_idx];  // Write data to buffer for transmitting
  42   2            tx_idx+=1;
  43   2            break;
  44   2      
  45   2          case I2C_ADDR_WR: // START+ADDR+W
  46   2            I2C0STAT &= ~(I2C0STAT_START__BMASK | I2C0STAT_WR__BMASK);
  47   2            rx_idx = 0;
C51 COMPILER V9.60.0.0   I2CBRIDGE                                                         03/21/2023 20:03:58 PAGE 2   

  48   2            break;
  49   2      
  50   2      
  51   2          case I2C_RD_DATA:
  52   2            // Check for NACK
  53   2            if ((I2C0STAT & I2C0STAT_NACK__BMASK) == I2C0STAT_NACK__SET) {
  54   3              // Master did not NACK
  55   3              // Stopping transfer of data
  56   3              // Flush FIFO if there is data in it
  57   3              I2C0STAT &= ~I2C0STAT_NACK__BMASK;
  58   3            } else { // Prepare data for master
  59   3      
  60   3              I2C0DOUT = tx_buffer[tx_idx];
  61   3              tx_idx+=1;
  62   3      
  63   3            }
  64   2            I2C0STAT &= ~I2C0STAT_RD__BMASK;
  65   2            break;
  66   2      
  67   2          case I2C_WR_DATA:  // FIFO is full, whatever slave ACK/NACK master
  68   2            I2C0STAT &= ~I2C0STAT_WR__BMASK;
  69   2      
  70   2            break;
  71   2      
  72   2          case I2C_STOSTA:
  73   2          case I2C_STOSTARD:
  74   2            I2C0STAT &= ~I2C0STAT_STOP__BMASK;
  75   2            //
  76   2            //  STOP Condition received.
  77   2            //
  78   2            return;   // START Flag set, so re-enter ISR
  79   2            break;
  80   2      
  81   2          case I2C_STO:
  82   2            I2C0STAT &= ~I2C0STAT_STOP__BMASK;
  83   2            //
  84   2            //  STOP Condition received.
  85   2            //memset(&tx_buffer, 0, 11);
  86   2            //
  87   2            break;
  88   2          default:
  89   2            break;
  90   2        }
  91   1      
  92   1        // Poll this bit is also OK
  93   1        // while(I2C0FCT&I2C0FCT_RXCNT__FMASK) {
  94   1        while((I2C0FCN1 & I2C0FCN1_RXE__BMASK) == I2C0FCN1_RXE__NOT_EMPTY) { // Read data out
  95   2      
  96   2            rx_buffer[rx_idx]  = I2C0DIN;
  97   2      
  98   2            if (rx_idx == 0)
  99   2            {
 100   3                rx_remaining = 10;
 101   3            }
 102   2      
 103   2            rx_idx += 1;
 104   2            rx_remaining -= 1;
 105   2      
 106   2            if (rx_remaining == 0 && !rx_complete)
 107   2            {
 108   3              rx_complete = true;
 109   3              rx_idx = 0;
 110   3            }
C51 COMPILER V9.60.0.0   I2CBRIDGE                                                         03/21/2023 20:03:58 PAGE 3   

 111   2      
 112   2        }
 113   1      
 114   1        // Clear I2C interrupt flag
 115   1        I2C0STAT &= ~I2C0STAT_I2C0INT__BMASK;
 116   1      }
 117          
 118          
 119          
 120          
 121          
 122          //-----------------------------------------------------------------------------
 123          // TIMER4_ISR
 124          //-----------------------------------------------------------------------------
 125          //
 126          // TIMER4 ISR Content goes here. Remember to clear flag bits:
 127          // TMR4CN0::TF4H (Timer # High Byte Overflow Flag)
 128          // TMR4CN0::TF4L (Timer # Low Byte Overflow Flag)
 129          //
 130          //-----------------------------------------------------------------------------
 131          SI_INTERRUPT(TIMER4_ISR, TIMER4_IRQn)
 132          {
 133   1        SFRPAGE = I2CSLAVE0_PAGE;
 134   1      
 135   1        I2C0CN0 &= ~I2C0CN0_I2C0EN__BMASK;      // Disable I2C module
 136   1        I2C0CN0 |= I2C0CN0_I2C0EN__ENABLED;     // Re-enable I2C module
 137   1      
 138   1        SFRPAGE = TIMER4_PAGE;
 139   1        TMR4CN0 &= ~TMR4CN0_TF4H__BMASK;      // Clear Timer3 interrupt-pending flag
 140   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    255    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     36    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
