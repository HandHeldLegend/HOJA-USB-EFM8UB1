C51 COMPILER V9.60.0.0   GAMEPAD                                                           01/12/2023 16:52:33 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE GAMEPAD
OBJECT MODULE PLACED IN .\src\gamepad.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\Mitch\S
                    -implicityStudio\v5_workspace\HOJA-USB-EFM8UB1\src\gamepad.c OMF2 LARGE ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE
                    -(9,SIZE) DEFINE(NDEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\Mitch\SimplicityStudio\v5_workspace\HOJA-USB-EFM8
                    -UB1\inc;C:\Users\Mitch\SimplicityStudio\v5_workspace\HOJA-USB-EFM8UB1\inc\config;C:/SiliconLabs/SimplicityStudio/v5/deve
                    -loper/sdks/8051/v4.2.4//Lib/efm8_assert;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.4//Lib/efm8_usb/inc;
                    -C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.4//Device/EFM8UB1/peripheral_driver/inc;C:/SiliconLabs/Simpl
                    -icityStudio/v5/developer/sdks/8051/v4.2.4//Lib/efm8_usbc/lib_kernel/inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdk
                    -s/8051/v4.2.4//Lib/efm8_usbc/lib_usbc_pd/inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.4//Device/share
                    -d/si8051Base;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.4//Device/EFM8UB1/inc) REGFILE(HOJA-USB-EFM8UB1
                    -.ORC) PRINT(.\src\gamepad.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OA OBJECT(.\src\gamepad.OBJ)

line level    source

   1          /*
   2           * gamepad.c
   3           *
   4           *  Created on: Sep 12, 2022
   5           *      Author: Mitch
   6           */
   7          
   8          #include "gamepad.h"
*** WARNING C318 IN LINE 11 OF C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.4//Device/EFM8UB1/peripheral_
             -driver/inc\smb_0.h: can't open file 'efm8_config.h'
   9          
  10          Gamepad_USB_Subcore_TypeDef gamepadSubcore = USB_SUBCORE_DINPUT;
  11          Gamepad_System_Status_TypeDef gamepadStatus = GAMEPAD_STATUS_NOCONNECT;
  12          bool sendReport = false;
  13          
  14          void gamepadCmd()
  15          {
  16   1        switch (rx_buffer[I2CB_COMMAND_IDX])
  17   1        {
  18   2          default:
  19   2          case I2CB_CMD_CHECKREADY:
  20   2            gamepadCheckReady();
  21   2            break;
  22   2          case I2CB_CMD_SYSTEMSET:
  23   2            gamepadSysSet((Gamepad_System_Set_TypeDef) rx_buffer[I2CB_DATA_IDX]);
  24   2            break;
  25   2          case I2CB_CMD_INPUT:
  26   2            gamepadInput();
  27   2            break;
  28   2        }
  29   1      }
  30          
  31          void gamepadCheckReady()
  32          {
  33   1          tx_buffer[I2CB_COMMAND_IDX] = 0x00;
  34   1          tx_buffer[I2CB_DATA_IDX] = gamepadStatus;
  35   1          tx_idx = 0;
  36   1          tx_remaining = 2;
  37   1      }
  38          
  39          void gamepadSysSet(Gamepad_System_Set_TypeDef setting)
  40          {
  41   1        I2C_Response_Messsage_TypeDef ret = I2CB_FAIL;
  42   1        uint8_t usbret = USB_STATUS_OK;
  43   1      
  44   1        switch (setting)
  45   1        {
C51 COMPILER V9.60.0.0   GAMEPAD                                                           01/12/2023 16:52:33 PAGE 2   

  46   2          default:
  47   2          case SYSTEM_SET_STARTUSB:
  48   2            ret = gamepadSetSubcore((Gamepad_USB_Subcore_TypeDef) rx_buffer[I2CB_SUBCORE_IDX]);
  49   2            break;
  50   2          case SYSTEM_SET_STOPUSB:
  51   2            USBD_Stop();
  52   2            ret = I2CB_OK;
  53   2            break;
  54   2          case SYSTEM_SET_SLEEPUSB:
  55   2            USBD_Stop();
  56   2            ret = I2CB_OK;
  57   2            break;
  58   2          case SYSTEM_SET_RESETUSB:
  59   2            USBD_Stop();
  60   2            ret = I2CB_OK;
  61   2            RSTSRC |= RSTSRC_SWRSF__BMASK;
  62   2            break;
  63   2        }
  64   1      
  65   1        tx_buffer[I2CB_COMMAND_IDX] = ret;
  66   1        tx_idx = 0;
  67   1        tx_remaining = 1;
  68   1      }
  69          
  70          void gamepadInput()
  71          {
  72   1        memcpy(&i2c_input_buffer, &rx_buffer[1], I2C_INPUT_SIZE);
  73   1        switch(gamepadSubcore)
  74   1        {
  75   2          default:
  76   2          case USB_SUBCORE_DINPUT:
  77   2            dinputUpdateReport();
  78   2            break;
  79   2          case USB_SUBCORE_NS:
  80   2            nsproUpdateReport();
  81   2            break;
  82   2          case USB_SUBCORE_XINPUT:
  83   2            xinputUpdateReport();
  84   2            break;
  85   2          case USB_SUBCORE_GCINPUT:
  86   2            break;
  87   2        }
  88   1      }
  89          
  90          I2C_Response_Messsage_TypeDef gamepadSetSubcore(Gamepad_USB_Subcore_TypeDef mode)
  91          {
  92   1        uint8_t usbret = USB_STATUS_OK;
  93   1        I2C_Response_Messsage_TypeDef ret = I2CB_FAIL;
  94   1        switch (mode)
  95   1        {
  96   2          default:
  97   2          case USB_SUBCORE_DINPUT:
  98   2            usbret = USBD_Init(&dinput_init_struct);
  99   2            if (usbret != USB_STATUS_OK)
 100   2            {
 101   3              ret = I2CB_FAIL;
 102   3            }
 103   2            else if (usbret == USB_STATUS_OK)
 104   2            {
 105   3              gamepadSubcore = USB_SUBCORE_DINPUT;
 106   3              ret = I2CB_OK;
 107   3              sendReport = true;
 108   3            }
C51 COMPILER V9.60.0.0   GAMEPAD                                                           01/12/2023 16:52:33 PAGE 3   

 109   2            break;
 110   2      
 111   2          case USB_SUBCORE_NS:
 112   2            usbret = USBD_Init(&nspro_init_struct);
 113   2            if (usbret != USB_STATUS_OK)
 114   2            {
 115   3              ret = I2CB_FAIL;
 116   3            }
 117   2            else if (usbret == USB_STATUS_OK)
 118   2            {
 119   3              ret = I2CB_OK;
 120   3              gamepadSubcore = USB_SUBCORE_NS;
 121   3              sendReport = true;
 122   3            }
 123   2            break;
 124   2      
 125   2          case USB_SUBCORE_XINPUT:
 126   2            usbret = USBD_Init(&xinput_init_struct);
 127   2            if (usbret != USB_STATUS_OK)
 128   2            {
 129   3              ret = I2CB_FAIL;
 130   3            }
 131   2            else if (usbret == USB_STATUS_OK)
 132   2            {
 133   3              ret = I2CB_OK;
 134   3              gamepadSubcore = USB_SUBCORE_XINPUT;
 135   3              sendReport = true;
 136   3            }
 137   2            break;
 138   2      
 139   2          case USB_SUBCORE_GCINPUT:
 140   2            usbret = USBD_Init(&nspro_init_struct);
 141   2            if (usbret != USB_STATUS_OK)
 142   2            {
 143   3              ret = I2CB_FAIL;
 144   3            }
 145   2            else if (usbret == USB_STATUS_OK)
 146   2            {
 147   3              ret = I2CB_OK;
 148   3              gamepadSubcore = USB_SUBCORE_NS;
 149   3              sendReport = true;
 150   3            }
 151   2            break;
 152   2        }
 153   1      
 154   1        return ret;
 155   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    392    ----
   CONSTANT SIZE    =     29    ----
   XDATA SIZE       =      2       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
