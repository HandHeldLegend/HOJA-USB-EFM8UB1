C51 COMPILER V9.60.0.0   GAMEPAD                                                           04/04/2023 23:29:26 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE GAMEPAD
OBJECT MODULE PLACED IN .\src\gamepad.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\Mitch\S
                    -implicityStudio\v5_workspace\HOJA-USB-EFM8UB1\src\gamepad.c OMF2 LARGE ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE
                    -(9,SIZE) DEFINE(NDEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\Mitch\SimplicityStudio\v5_workspace\HOJA-USB-EFM8
                    -UB1\inc;C:\Users\Mitch\SimplicityStudio\v5_workspace\HOJA-USB-EFM8UB1\inc\config;C:/SiliconLabs/SimplicityStudio/v5/deve
                    -loper/sdks/8051/v4.2.4//Lib/efm8_assert;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.4//Lib/efm8_usb/inc;
                    -C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.4//Device/EFM8UB1/peripheral_driver/inc;C:/SiliconLabs/Simpl
                    -icityStudio/v5/developer/sdks/8051/v4.2.4//Lib/efm8_usbc/lib_kernel/inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdk
                    -s/8051/v4.2.4//Lib/efm8_usbc/lib_usbc_pd/inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.4//Device/share
                    -d/si8051Base;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.4//Device/EFM8UB1/inc) REGFILE(HOJA-USB-EFM8UB1
                    -.ORC) PRINT(.\src\gamepad.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OA OBJECT(.\src\gamepad.OBJ)

line level    source

   1          /*
   2           * gamepad.c
   3           *
   4           *  Created on: Sep 12, 2022
   5           *      Author: Mitch
   6           */
   7          
   8          #include "gamepad.h"
*** WARNING C318 IN LINE 11 OF C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.4//Device/EFM8UB1/peripheral_
             -driver/inc\smb_0.h: can't open file 'efm8_config.h'
   9          
  10          usb_subcore_t gamepadSubcore = USB_SUBCORE_DINPUT;
  11          ui2c_gamepad_status_t gamepadStatus = GAMEPAD_STATUS_IDLE;
  12          ui2c_usb_status_t usbStatus = USB_STATUS_NOBUS;
  13          
  14          bool sendReport = false;
  15          
  16          bool gpRumble         = false; // Flag that toggles rumble on/off
  17          bool gpConfigRequest  = false; // Flag that tells the I2C master to send back config data
  18          bool gpConfigWrite    = false; // Flag that tells the I2C master to write config data
  19          uint8_t gpConfigData[8] = {0}; // Tmp storage for what data to send
  20          
  21          // Stop the USB mode from running if it's running
  22          void gamepadStop()
  23          {
  24   1        // Clear USB if we are already running.
  25   1        if (gamepadStatus != GAMEPAD_STATUS_IDLE)
  26   1        {
  27   2          // Stop the current USB and change the mode.
  28   2          sendReport = false;
  29   2          USBD_Stop();
  30   2          gamepadStatus = GAMEPAD_STATUS_IDLE;
  31   2        }
  32   1      }
  33          
  34          // Handle an I2C gamepad command
  35          void gamepadCmd()
  36          {
  37   1        // Check the command byte which is the first byte of the I2C rx
  38   1        switch (rx_buffer[I2C_COMMAND_IDX])
  39   1        {
  40   2          default:
  41   2          case I2C_SYSCMD_IDLE:
  42   2            break;
  43   2      
  44   2          case I2C_SYSCMD_SETUSB:
  45   2            gamepadUSBModeSet((usb_subcore_t) rx_buffer[I2C_SUBCMD_IDX]);
C51 COMPILER V9.60.0.0   GAMEPAD                                                           04/04/2023 23:29:26 PAGE 2   

  46   2            break;
  47   2      
  48   2          case I2C_SYSCMD_SETMODE:
  49   2            gamepadModeSet((ui2c_setmode_t) rx_buffer[I2C_SUBCMD_IDX]);
  50   2            break;
  51   2      
  52   2          case I2C_SYSCMD_INPUT:
  53   2            gamepadInput();
  54   2            break;
  55   2      
  56   2          case I2C_SYSCMD_CONFIG:
  57   2            gamepadConfigInput();
  58   2            break;
  59   2        }
  60   1        gamepadReturnCmd();
  61   1      }
  62          
  63          // Handle a system command. Stop, start, or reset.
  64          void gamepadModeSet(ui2c_setmode_t cmd)
  65          {
  66   1        uint8_t usbret = USB_STATUS_OK;
  67   1      
  68   1        switch(cmd)
  69   1        {
  70   2            default:
  71   2            case I2C_SETMODE_STOP:
  72   2              gamepadStop();
  73   2              break;
  74   2      
  75   2            case I2C_SETMODE_START:
  76   2      
  77   2              if (gamepadStatus == GAMEPAD_STATUS_INITIALIZED)
  78   2              {
  79   3                return;
  80   3              }
  81   2              switch(gamepadSubcore)
  82   2              {
  83   3                default:
  84   3                    break;
  85   3      
  86   3                case USB_SUBCORE_DINPUT:
  87   3                    // Start USB
  88   3                    usbret = USBD_Init(&dinput_init_struct);
  89   3                    if (usbret != USB_STATUS_OK)
  90   3                    {
  91   4                      // Change nothing if we fail
  92   4                      return;
  93   4                    }
  94   3                    else if (usbret == USB_STATUS_OK)
  95   3                    {
  96   4                      gamepadStatus = GAMEPAD_STATUS_INITIALIZED;
  97   4                      return;
  98   4                    }
  99   3                    break;
 100   3      
 101   3                case USB_SUBCORE_NS:
 102   3                    // Start USB
 103   3                    usbret = USBD_Init(&nspro_init_struct);
 104   3                    if (usbret != USB_STATUS_OK)
 105   3                    {
 106   4                      // Change nothing if we fail
 107   4                      return;
 108   4                    }
C51 COMPILER V9.60.0.0   GAMEPAD                                                           04/04/2023 23:29:26 PAGE 3   

 109   3                    else if (usbret == USB_STATUS_OK)
 110   3                    {
 111   4                      gamepadStatus = GAMEPAD_STATUS_INITIALIZED;
 112   4                      return;
 113   4                    }
 114   3                    break;
 115   3      
 116   3                case USB_SUBCORE_XINPUT:
 117   3                    // Start USB
 118   3                    usbret = USBD_Init(&xinput_init_struct);
 119   3                    if (usbret != USB_STATUS_OK)
 120   3                    {
 121   4                      // Change nothing if we fail
 122   4                      return;
 123   4                    }
 124   3                    else if (usbret == USB_STATUS_OK)
 125   3                    {
 126   4                        gamepadStatus = GAMEPAD_STATUS_INITIALIZED;
 127   4                      return;
 128   4                    }
 129   3                    break;
 130   3      
 131   3                case USB_SUBCORE_GCINPUT:
 132   3                    // Start USB
 133   3                    usbret = USBD_Init(&nspro_init_struct);
 134   3                    if (usbret != USB_STATUS_OK)
 135   3                    {
 136   4                      // Change nothing if we fail
 137   4                      return;
 138   4                    }
 139   3                    else if (usbret == USB_STATUS_OK)
 140   3                    {
 141   4                      gamepadStatus = GAMEPAD_STATUS_INITIALIZED;
 142   4                      return;
 143   4                    }
 144   3                    break;
 145   3              }
 146   2              break;
 147   2      
 148   2            case I2C_SETMODE_RESET:
 149   2              gamepadModeSet(I2C_SETMODE_STOP);
 150   2              gamepadModeSet(I2C_SETMODE_START);
 151   2              break;
 152   2        }
 153   1      }
 154          
 155          // Set the USB Gamepad mode
 156          void gamepadUSBModeSet(usb_subcore_t coreType)
 157          {
 158   1          // Make sure we are IDLE
 159   1          gamepadStop();
 160   1          gamepadSubcore = USB_SUBCORE_IDLE;
 161   1          gamepadSubcore = coreType;
 162   1      }
 163          
 164          // Send a USB Input report with gamepad data
 165          void gamepadInput()
 166          {
 167   1        if (usbStatus != USB_STATUS_BUSOK)
 168   1        {
 169   2            return;
 170   2        }
 171   1        else
C51 COMPILER V9.60.0.0   GAMEPAD                                                           04/04/2023 23:29:26 PAGE 4   

 172   1        {
 173   2          memcpy(&i2c_input_buffer, &rx_buffer[1], I2C_INPUT_SIZE);
 174   2      
 175   2          switch(gamepadSubcore)
 176   2          {
 177   3            default:
 178   3            case USB_SUBCORE_DINPUT:
 179   3              dinputUpdateReport();
 180   3              break;
 181   3            case USB_SUBCORE_NS:
 182   3              nsproUpdateReport();
 183   3              break;
 184   3            case USB_SUBCORE_XINPUT:
 185   3              xinputUpdateReport();
 186   3              break;
 187   3            case USB_SUBCORE_GCINPUT:
 188   3              break;
 189   3          }
 190   2        }
 191   1      
 192   1      }
 193          
 194          // Send a USB Input report with config data
 195          void gamepadConfigInput()
 196          {
 197   1      
 198   1      }
 199          
 200          bool first_set = false;
 201          
 202          // Pass through config data request to I2C
 203          void gamepadReturnCmd()
 204          {
 205   1        if (!first_set)
 206   1        {
 207   2            // Clear TX buffer first
 208   2            memset(&tx_buffer, 0, sizeof(tx_buffer));
 209   2            first_set = true;
 210   2        }
 211   1      
 212   1        ui2c_return_msg.rumble         = gpRumble;
 213   1        ui2c_return_msg.config_request = gpConfigRequest;
 214   1        ui2c_return_msg.config_write   = gpConfigWrite;
 215   1        ui2c_return_msg.gamepad_status = gamepadStatus;
 216   1        ui2c_return_msg.usb_status     = (usbStatus == USB_STATUS_BUSOK);
 217   1      
 218   1        if (gpConfigWrite)
 219   1          {
 220   2      
 221   2            memcpy(&tx_buffer[1], gpConfigData, 9);
 222   2            gpConfigWrite = false;
 223   2          }
 224   1      
 225   1        if (gpConfigRequest)
 226   1        {
 227   2      
 228   2          memcpy(&tx_buffer[1], gpConfigData, 9);
 229   2          gpConfigRequest = false;
 230   2        }
 231   1      
 232   1        memcpy(&tx_buffer[0], &ui2c_return_msg, sizeof(uint8_t));
 233   1      
 234   1        tx_idx = 0;
C51 COMPILER V9.60.0.0   GAMEPAD                                                           04/04/2023 23:29:26 PAGE 5   

 235   1        tx_remaining = 11;
 236   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    569    ----
   CONSTANT SIZE    =     29    ----
   XDATA SIZE       =     11       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      5    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
