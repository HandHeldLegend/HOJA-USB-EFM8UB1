C51 COMPILER V9.60.0.0   NINTENDO                                                          11/24/2022 22:53:03 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE NINTENDO
OBJECT MODULE PLACED IN .\src\nintendo.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\Mitch\S
                    -implicityStudio\v5_workspace\HOJA-USB-EFM8UB1\src\nintendo.c OMF2 LARGE ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZ
                    -E(9,SIZE) DEFINE(NDEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\Mitch\SimplicityStudio\v5_workspace\HOJA-USB-EFM
                    -8UB1\inc;C:\Users\Mitch\SimplicityStudio\v5_workspace\HOJA-USB-EFM8UB1\inc\config;C:/SiliconLabs/SimplicityStudio/v5/dev
                    -eloper/sdks/8051/v4.2.4//Lib/efm8_assert;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.4//Lib/efm8_usb/inc
                    -;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.4//Device/EFM8UB1/peripheral_driver/inc;C:/SiliconLabs/Simp
                    -licityStudio/v5/developer/sdks/8051/v4.2.4//Lib/efm8_usbc/lib_kernel/inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sd
                    -ks/8051/v4.2.4//Lib/efm8_usbc/lib_usbc_pd/inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.4//Device/shar
                    -ed/si8051Base;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.4//Device/EFM8UB1/inc) REGFILE(HOJA-USB-EFM8UB
                    -1.ORC) PRINT(.\src\nintendo.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OA OBJECT(.\src\nintendo.OBJ)

line level    source

   1          /*
   2           * nintendo.c
   3           *
   4           *  Created on: Sep 14, 2022
   5           *      Author: Mitch
   6           */
   7          
   8          #include "nintendo.h"
   9          #include "gamepad.h"
*** WARNING C318 IN LINE 11 OF C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.4//Device/EFM8UB1/peripheral_
             -driver/inc\smb_0.h: can't open file 'efm8_config.h'
  10          
  11          ns_input_s ns_reportBuffer = {0};
  12          
  13          // Return the proper byte format for hat direction based on
  14          // input direction.
  15          Input_Hat_Dir_Type getHatDir(uint8_t leftRight, uint8_t upDown)
  16          {
  17   1        Input_Hat_Dir_Type ret = HAT_CENTER;
  18   1      
  19   1        if (leftRight == 2)
  20   1        {
  21   2          ret = HAT_RIGHT;
  22   2          if (upDown == 2)
  23   2          {
  24   3            ret = HAT_TOP_RIGHT;
  25   3          }
  26   2          else if (upDown == 0)
  27   2          {
  28   3            ret = HAT_BOTTOM_RIGHT;
  29   3          }
  30   2        }
  31   1        else if (leftRight == 0)
  32   1        {
  33   2          ret = HAT_LEFT;
  34   2          if (upDown == 2)
  35   2          {
  36   3            ret = HAT_TOP_LEFT;
  37   3          }
  38   2          else if (upDown == 0)
  39   2          {
  40   3            ret = HAT_BOTTOM_LEFT;
  41   3          }
  42   2        }
  43   1      
  44   1        else if (upDown == 2)
  45   1        {
C51 COMPILER V9.60.0.0   NINTENDO                                                          11/24/2022 22:53:03 PAGE 2   

  46   2          ret = HAT_TOP;
  47   2        }
  48   1        else if (upDown == 0)
  49   1        {
  50   2          ret = HAT_BOTTOM;
  51   2        }
  52   1      
  53   1        return ret;
  54   1      }
  55          
  56          void updateNSReport()
  57          {
  58   1        uint8_t lr = 1;
  59   1        uint8_t ud = 1;
  60   1      
  61   1        // Set all the right bits
  62   1        ns_reportBuffer.buttons_1.button_a    = i2c_input_buffer.buttons_1.button_a;
  63   1        ns_reportBuffer.buttons_1.button_b    = i2c_input_buffer.buttons_1.button_b;
  64   1        ns_reportBuffer.buttons_1.button_x    = i2c_input_buffer.buttons_1.button_x;
  65   1        ns_reportBuffer.buttons_1.button_y    = i2c_input_buffer.buttons_1.button_y;
  66   1      
  67   1        ns_reportBuffer.buttons_1.trigger_l   = i2c_input_buffer.buttons_2.trigger_l;
  68   1        ns_reportBuffer.buttons_1.trigger_r   = i2c_input_buffer.buttons_2.trigger_r;
  69   1        ns_reportBuffer.buttons_1.trigger_zl  = i2c_input_buffer.buttons_2.trigger_zl;
  70   1        ns_reportBuffer.buttons_1.trigger_zr  = i2c_input_buffer.buttons_2.trigger_zr;
  71   1      
  72   1        ns_reportBuffer.buttons_2.button_minus    = i2c_input_buffer.buttons_2.button_minus;
  73   1        ns_reportBuffer.buttons_2.button_plus     = i2c_input_buffer.buttons_2.button_plus;
  74   1        ns_reportBuffer.buttons_2.button_capture  = i2c_input_buffer.buttons_2.button_capture;
  75   1        ns_reportBuffer.buttons_2.button_home     = i2c_input_buffer.buttons_2.button_home;
  76   1      
  77   1        ns_reportBuffer.buttons_2.stick_left = i2c_input_buffer.buttons_3.stick_left;
  78   1        ns_reportBuffer.buttons_2.stick_right = i2c_input_buffer.buttons_3.stick_right;
  79   1      
  80   1        ns_reportBuffer.stick_left_x    = i2c_input_buffer.stick_left_x;
  81   1        ns_reportBuffer.stick_left_y    = i2c_input_buffer.stick_left_y;
  82   1        ns_reportBuffer.stick_right_x    = i2c_input_buffer.stick_right_x;
  83   1        ns_reportBuffer.stick_right_y    = i2c_input_buffer.stick_right_y;
  84   1      
  85   1        lr = 1 - i2c_input_buffer.buttons_1.dpad_left + i2c_input_buffer.buttons_1.dpad_right;
  86   1        ud = 1 - i2c_input_buffer.buttons_1.dpad_down + i2c_input_buffer.buttons_1.dpad_up;
  87   1      
  88   1        ns_reportBuffer.dpad_hat    = (uint8_t) getHatDir(lr, ud);
  89   1      
  90   1        if (sendReport)
  91   1        {
  92   2            sendReport = false;
  93   2            USBD_Write(EP1IN,
  94   2                               (uint8_t *) &ns_reportBuffer,
  95   2                               8,
  96   2                               true);
  97   2        }
  98   1      
  99   1      }
 100          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    445    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      8    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
C51 COMPILER V9.60.0.0   NINTENDO                                                          11/24/2022 22:53:03 PAGE 3   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
