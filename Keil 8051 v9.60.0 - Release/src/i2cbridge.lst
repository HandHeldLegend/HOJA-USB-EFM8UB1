C51 COMPILER V9.60.0.0   I2CBRIDGE                                                         09/15/2022 21:04:21 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE I2CBRIDGE
OBJECT MODULE PLACED IN .\src\i2cbridge.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\Mitch\S
                    -implicityStudio\v5_workspace\HOJA-USB-EFM8UB1\src\i2cbridge.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) F
                    -LOATFUZZY(3) OPTIMIZE(9,SPEED) DEFINE(NDEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\Mitch\SimplicityStudio\v5_w
                    -orkspace\HOJA-USB-EFM8UB1\inc;C:\Users\Mitch\SimplicityStudio\v5_workspace\HOJA-USB-EFM8UB1\inc\config;C:/SiliconLabs/Si
                    -mplicityStudio/v5/developer/sdks/8051/v4.2.3//Lib/efm8_assert;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.
                    -2.3//Lib/efm8_usb/inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.3//Device/EFM8UB1/peripheral_driver/in
                    -c;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.3//Lib/efm8_usbc/lib_kernel/inc;C:/SiliconLabs/SimplicityS
                    -tudio/v5/developer/sdks/8051/v4.2.3//Lib/efm8_usbc/lib_usbc_pd/inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/805
                    -1/v4.2.3//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.3//Device/EFM8UB1/inc) RE
                    -GFILE(HOJA-USB-EFM8UB1.ORC) PRINT(.\src\i2cbridge.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OA OBJECT(.\src\i2cbridge.OBJ)

line level    source

   1          /*
   2           * i2c.c
   3           *
   4           *  Created on: Sep 13, 2022
   5           *      Author: Mitch
   6           */
   7          
   8          #include "i2cbridge.h"
   9          
  10          uint8_t rx_buffer[10] = {0};
  11          uint8_t rx_idx = 0;
  12          uint8_t rx_remaining = 9;
  13          
  14          bool rx_complete = false;
  15          
  16          uint8_t tx_buffer[4] = {0};
  17          uint8_t tx_idx = 0;
  18          uint8_t tx_remaining = 4;
  19          
  20          i2c_input_s i2c_input_buffer = {0};
  21          
  22          //-----------------------------------------------------------------------------
  23          // I2C0_ISR
  24          //-----------------------------------------------------------------------------
  25          //
  26          // I2C0 ISR Content goes here. Remember to clear flag bits:
  27          // I2C0STAT::I2C0INT (I2C Interrupt)
  28          //
  29          //-----------------------------------------------------------------------------
  30          SI_INTERRUPT(I2C0_ISR, I2C0_IRQn)
  31          {
  32   1        switch (I2C0STAT & I2C_STATUS_VECTOR_MASK) {
  33   2      
  34   2          case I2C_ADDR_RD:  // START+ADDR+R
  35   2            I2C0STAT &= ~(I2C0STAT_START__BMASK | I2C0STAT_RD__BMASK);
  36   2      
  37   2            tx_idx = 0;
  38   2            I2C0DOUT = tx_buffer[tx_idx];  // Write data to buffer for transmitting
  39   2            tx_idx+=1;
  40   2            break;
  41   2      
  42   2          case I2C_ADDR_WR: // START+ADDR+W
  43   2            I2C0STAT &= ~(I2C0STAT_START__BMASK | I2C0STAT_WR__BMASK);
  44   2            rx_idx = 0;
  45   2            break;
  46   2      
  47   2      
C51 COMPILER V9.60.0.0   I2CBRIDGE                                                         09/15/2022 21:04:21 PAGE 2   

  48   2          case I2C_RD_DATA:
  49   2            // Check for NACK
  50   2            if ((I2C0STAT & I2C0STAT_NACK__BMASK) == I2C0STAT_NACK__SET) {
  51   3              // Master did not NACK
  52   3              // Stopping transfer of data
  53   3              // Flush FIFO if there is data in it
  54   3              I2C0STAT &= ~I2C0STAT_NACK__BMASK;
  55   3            } else { // Prepare data for master
  56   3      
  57   3              I2C0DOUT = tx_buffer[tx_idx];
  58   3              tx_idx+=1;
  59   3      
  60   3            }
  61   2            I2C0STAT &= ~I2C0STAT_RD__BMASK;
  62   2            break;
  63   2      
  64   2          case I2C_WR_DATA:  // FIFO is full, whatever slave ACK/NACK master
  65   2            I2C0STAT &= ~I2C0STAT_WR__BMASK;
  66   2      
  67   2            break;
  68   2      
  69   2          case I2C_STOSTA:
  70   2          case I2C_STOSTARD:
  71   2            I2C0STAT &= ~I2C0STAT_STOP__BMASK;
  72   2            //
  73   2            //  STOP Condition received.
  74   2            //
  75   2            return;   // START Flag set, so re-enter ISR
  76   2            break;
  77   2      
  78   2          case I2C_STO:
  79   2            I2C0STAT &= ~I2C0STAT_STOP__BMASK;
  80   2            //
  81   2            //  STOP Condition received.
  82   2            //
  83   2            break;
  84   2          default:
  85   2            break;
  86   2        }
  87   1      
  88   1        // Poll this bit is also OK
  89   1        // while(I2C0FCT&I2C0FCT_RXCNT__FMASK) {
  90   1        while((I2C0FCN1 & I2C0FCN1_RXE__BMASK) == I2C0FCN1_RXE__NOT_EMPTY) { // Read data out
  91   2      
  92   2            rx_buffer[rx_idx]  = I2C0DIN;
  93   2      
  94   2            if (rx_idx == 0)
  95   2            {
  96   3              switch(rx_buffer[0])
  97   3              {
  98   4                default:
  99   4                  rx_remaining = 2;
 100   4                  break;
 101   4                case I2CB_CMD_INPUT:
 102   4                  rx_remaining = 8;
 103   4                  break;
 104   4              }
 105   3            }
 106   2      
 107   2            rx_idx += 1;
 108   2            rx_remaining -= 1;
 109   2      
 110   2            if (rx_remaining == 0 && !rx_complete)
C51 COMPILER V9.60.0.0   I2CBRIDGE                                                         09/15/2022 21:04:21 PAGE 3   

 111   2            {
 112   3              rx_complete = true;
 113   3              rx_idx = 0;
 114   3            }
 115   2      
 116   2        }
 117   1      
 118   1        // Clear I2C interrupt flag
 119   1        I2C0STAT &= ~I2C0STAT_I2C0INT__BMASK;
 120   1      }
 121          
 122          
 123          
 124          
 125          
 126          //-----------------------------------------------------------------------------
 127          // TIMER4_ISR
 128          //-----------------------------------------------------------------------------
 129          //
 130          // TIMER4 ISR Content goes here. Remember to clear flag bits:
 131          // TMR4CN0::TF4H (Timer # High Byte Overflow Flag)
 132          // TMR4CN0::TF4L (Timer # Low Byte Overflow Flag)
 133          //
 134          //-----------------------------------------------------------------------------
 135          SI_INTERRUPT(TIMER4_ISR, TIMER4_IRQn)
 136          {
 137   1        SFRPAGE = I2CSLAVE0_PAGE;
 138   1      
 139   1        I2C0CN0 &= ~I2C0CN0_I2C0EN__BMASK;      // Disable I2C module
 140   1        I2C0CN0 |= I2C0CN0_I2C0EN__ENABLED;     // Re-enable I2C module
 141   1      
 142   1        SFRPAGE = TIMER4_PAGE;
 143   1        TMR4CN0 &= ~TMR4CN0_TF4H__BMASK;      // Clear Timer3 interrupt-pending flag
 144   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    244    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     25    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
