C51 COMPILER V9.60.0.0   NS_CALLBACK                                                       09/15/2022 21:04:22 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE NS_CALLBACK
OBJECT MODULE PLACED IN .\src\ns_callback.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\Mitch\S
                    -implicityStudio\v5_workspace\HOJA-USB-EFM8UB1\src\ns_callback.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2)
                    - FLOATFUZZY(3) OPTIMIZE(9,SPEED) DEFINE(NDEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\Mitch\SimplicityStudio\v5
                    -_workspace\HOJA-USB-EFM8UB1\inc;C:\Users\Mitch\SimplicityStudio\v5_workspace\HOJA-USB-EFM8UB1\inc\config;C:/SiliconLabs/
                    -SimplicityStudio/v5/developer/sdks/8051/v4.2.3//Lib/efm8_assert;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v
                    -4.2.3//Lib/efm8_usb/inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.3//Device/EFM8UB1/peripheral_driver/
                    -inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.3//Lib/efm8_usbc/lib_kernel/inc;C:/SiliconLabs/Simplicit
                    -yStudio/v5/developer/sdks/8051/v4.2.3//Lib/efm8_usbc/lib_usbc_pd/inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8
                    -051/v4.2.3//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.3//Device/EFM8UB1/inc) 
                    -REGFILE(HOJA-USB-EFM8UB1.ORC) PRINT(.\src\ns_callback.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OA OBJECT(.\src\ns_callbac
                    -k.OBJ)

line level    source

   1          /*
   2           * ns_callback.c
   3           *
   4           *  Created on: Sep 12, 2022
   5           *      Author: Mitch
   6           */
   7          
   8          #include "ns_callback.h"
   9          
  10          bool sendReport = false;
  11          
  12          void
  13          ns_SofCb (uint16_t sofNr)
  14          {
  15   1      
  16   1        /* HID joystick device sends report to host with idle tick count period interval */
  17   1        idleTimerTick();
  18   1      
  19   1        // Check if the device should send a report
  20   1        if (isIdleTimerExpired() == true)
  21   1        {
  22   2          sendReport = true;
  23   2        }
  24   1      
  25   1        if (sendReport)
  26   1        {
  27   2            USBD_Write(EP1IN,
  28   2                       (uint8_t *) &ns_reportBuffer,
  29   2                       NS_INPUT_SIZE,
  30   2                       false);
  31   2            sendReport = false;
  32   2        }
  33   1      
  34   1      }
*** WARNING C280 IN LINE 13 OF C:\Users\Mitch\SimplicityStudio\v5_workspace\HOJA-USB-EFM8UB1\src\ns_callback.c: 'sofNr':
             - unreferenced local variable
  35          
  36          uint16_t
  37          ns_XferCompleteCB (uint8_t epAddr, USB_Status_TypeDef status,
  38                             uint16_t xferred, uint16_t remaining)
  39          {
  40   1      
  41   1        return 0;
  42   1      }
*** WARNING C280 IN LINE 37 OF C:\Users\Mitch\SimplicityStudio\v5_workspace\HOJA-USB-EFM8UB1\src\ns_callback.c: 'epAddr'
             -: unreferenced local variable
C51 COMPILER V9.60.0.0   NS_CALLBACK                                                       09/15/2022 21:04:22 PAGE 2   

*** WARNING C280 IN LINE 37 OF C:\Users\Mitch\SimplicityStudio\v5_workspace\HOJA-USB-EFM8UB1\src\ns_callback.c: 'status'
             -: unreferenced local variable
*** WARNING C280 IN LINE 38 OF C:\Users\Mitch\SimplicityStudio\v5_workspace\HOJA-USB-EFM8UB1\src\ns_callback.c: 'xferred
             -': unreferenced local variable
*** WARNING C280 IN LINE 38 OF C:\Users\Mitch\SimplicityStudio\v5_workspace\HOJA-USB-EFM8UB1\src\ns_callback.c: 'remaini
             -ng': unreferenced local variable
  43          
  44          uint8_t tmpBuffer;
  45          
  46          USB_Status_TypeDef
  47          ns_SetupCmdCb (SI_VARIABLE_SEGMENT_POINTER
  48          (setup, USB_Setup_TypeDef, MEM_MODEL_SEG))
  49   1      {
  50   1        USB_Status_TypeDef retVal = USB_STATUS_REQ_UNHANDLED;
  51   1      
  52   1        // Set up specialty items
  53   1        // for Nintendo HID
  54   1        if ((setup->bmRequestType.Type == USB_SETUP_TYPE_STANDARD)
  55   1            && (setup->bmRequestType.Direction == USB_SETUP_DIR_IN)
  56   1            && (setup->bmRequestType.Recipient == USB_SETUP_RECIPIENT_INTERFACE))
  57   2        {
  58   2          // A HID device must extend the standard GET_DESCRIPTOR command
  59   2          // with support for HID descriptors.
  60   2          switch (setup->bRequest)
  61   3          {
  62   3            case GET_DESCRIPTOR:
  63   3              if ((setup->wValue >> 8) == USB_HID_REPORT_DESCRIPTOR)
  64   4              {
  65   4                switch (setup->wIndex)
  66   5                {
  67   5                  case 0: // Interface 0
  68   5      
  69   5                    USBD_Write(EP0,
  70   5                               (SI_VARIABLE_SEGMENT_POINTER(, uint8_t, SI_SEG_GENERIC))ns_HIDDescriptor,
  71   5                               EFM8_MIN(sizeof(ns_HIDDescriptor), setup->wLength),
  72   5                               false);
  73   5                    retVal = USB_STATUS_OK;
  74   5                    break;
  75   5      
  76   5                  default: // Unhandled Interface
  77   5                    break;
  78   4                }
  79   3              }
  80   3              else if ((setup->wValue >> 8) == USB_HID_DESCRIPTOR)
  81   4              {
  82   4                switch (setup->wIndex)
  83   5                {
  84   5                  case 0: // Interface 0
  85   5      
  86   5                    // Returns the pointer to the start
  87   5                    // of the HID descriptor portion of
  88   5                    // the config descriptor.
  89   5                    USBD_Write(EP0,
  90   5                               (SI_VARIABLE_SEGMENT_POINTER(, uint8_t, SI_SEG_GENERIC))(&ns_configDesc[18]),
  91   5                               EFM8_MIN(USB_HID_DESCSIZE, setup->wLength),
  92   5                               false);
  93   5                    retVal = USB_STATUS_OK;
  94   5                    break;
  95   5      
  96   5                  default: // Unhandled Interface
  97   5                    break;
  98   4                }
  99   3              }
C51 COMPILER V9.60.0.0   NS_CALLBACK                                                       09/15/2022 21:04:22 PAGE 3   

 100   3              break;
 101   2          }
 102   1        }
 103   1      
 104   1        else if ((setup->bmRequestType.Type == USB_SETUP_TYPE_CLASS)
 105   1                 && (setup->bmRequestType.Recipient == USB_SETUP_RECIPIENT_INTERFACE)
 106   1                 && (setup->wIndex == 0))
 107   2        {
 108   2          // Implement the necessary HID class specific commands.
 109   2          switch (setup->bRequest)
 110   3          {
 111   3            case USB_HID_SET_REPORT:
 112   3              if (((setup->wValue >> 8) == 2)               // Output report
 113   3                  && ((setup->wValue & 0xFF) == 0)          // Report ID
 114   3                  && (setup->wLength == 1)                  // Report length
 115   3                  && (setup->bmRequestType.Direction != USB_SETUP_DIR_IN))
 116   4              {
 117   4                USBD_Read(EP0, &tmpBuffer, 1, true);
 118   4                retVal = USB_STATUS_OK;
 119   3              }
 120   3              break;
 121   3      
 122   3            case USB_HID_GET_REPORT:
 123   3              if (((setup->wValue >> 8) == 1)               // Input report
 124   3                  && ((setup->wValue & 0xFF) == 0)          // Report ID
 125   3                  && (setup->wLength == 8)                  // Report length
 126   3                  && (setup->bmRequestType.Direction == USB_SETUP_DIR_IN))
 127   4              {
 128   4                USBD_Write(EP0,
 129   4                           (uint8_t *) &ns_reportBuffer,
 130   4                           NS_INPUT_SIZE,
 131   4                           false);
 132   4                retVal = USB_STATUS_OK;
 133   3              }
 134   3              break;
 135   3      
 136   3            case USB_HID_SET_IDLE:
 137   3              // Report ID
 138   3              // 0  - Idle duration applies to all report IDs
 139   3              // >0 - Idle duration applies to specified report ID only (not supported)
 140   3              if (((setup->wValue & 0xFF) == 0)
 141   3                  && (setup->wLength == 0)
 142   3                  && (setup->bmRequestType.Direction != USB_SETUP_DIR_IN))
 143   4              {
 144   4                // Set the idle duration in units of 4 ms
 145   4                //idleSetDuration(setup->wValue >> 8);
 146   4                retVal = USB_STATUS_OK;
 147   3              }
 148   3              break;
 149   3      
 150   3            case USB_HID_GET_IDLE:
 151   3              if ((setup->wValue == 0)                      // Report ID
 152   3                  && (setup->wLength == 1)
 153   3                  && (setup->bmRequestType.Direction == USB_SETUP_DIR_IN))
 154   4              {
 155   4                tmpBuffer = idleGetDuration();
 156   4                USBD_Write(EP0, &tmpBuffer, 1, false);
 157   4                retVal = USB_STATUS_OK;
 158   3              }
 159   3              break;
 160   2          }
 161   1        }
 162   1      
C51 COMPILER V9.60.0.0   NS_CALLBACK                                                       09/15/2022 21:04:22 PAGE 4   

 163   1        return retVal;


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    602    ----
   CONSTANT SIZE    =     29    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  5 WARNING(S),  0 ERROR(S)
